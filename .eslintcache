[{"C:\\Users\\hp\\Desktop\\fluence-task\\src\\index.tsx":"1","C:\\Users\\hp\\Desktop\\fluence-task\\src\\app.tsx":"2","C:\\Users\\hp\\Desktop\\fluence-task\\src\\Contexts\\Context.tsx":"3","C:\\Users\\hp\\Desktop\\fluence-task\\src\\WelcomePage\\index.tsx":"4","C:\\Users\\hp\\Desktop\\fluence-task\\src\\Dashboard\\index.tsx":"5","C:\\Users\\hp\\Desktop\\fluence-task\\src\\_aqua\\app.ts":"6","C:\\Users\\hp\\Desktop\\fluence-task\\src\\Contexts\\connection.jsx":"7","C:\\Users\\hp\\Desktop\\fluence-task\\src\\Contexts\\join.jsx":"8","C:\\Users\\hp\\Desktop\\fluence-task\\src\\components\\userList.tsx":"9","C:\\Users\\hp\\Desktop\\fluence-task\\src\\components\\Tiles\\index.js":"10","C:\\Users\\hp\\Desktop\\fluence-task\\src\\components\\Modal\\index.js":"11","C:\\Users\\hp\\Desktop\\fluence-task\\src\\components\\handlers.tsx":"12"},{"size":380,"mtime":1657954370803,"results":"13","hashOfConfig":"14"},{"size":678,"mtime":1657956866228,"results":"15","hashOfConfig":"14"},{"size":1489,"mtime":1657954370512,"results":"16","hashOfConfig":"14"},{"size":7803,"mtime":1657962881587,"results":"17","hashOfConfig":"14"},{"size":9855,"mtime":1657960868789,"results":"18","hashOfConfig":"14"},{"size":24287,"mtime":1657954370792,"results":"19","hashOfConfig":"14"},{"size":123,"mtime":1657954370513,"results":"20","hashOfConfig":"14"},{"size":109,"mtime":1657954370514,"results":"21","hashOfConfig":"14"},{"size":3391,"mtime":1657959468883,"results":"22","hashOfConfig":"14"},{"size":904,"mtime":1657954370799,"results":"23","hashOfConfig":"14"},{"size":453,"mtime":1657954370797,"results":"24","hashOfConfig":"14"},{"size":563,"mtime":1657958328029,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"dv63ie",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hp\\Desktop\\fluence-task\\src\\index.tsx",[],["53","54"],"C:\\Users\\hp\\Desktop\\fluence-task\\src\\app.tsx",[],"C:\\Users\\hp\\Desktop\\fluence-task\\src\\Contexts\\Context.tsx",[],"C:\\Users\\hp\\Desktop\\fluence-task\\src\\WelcomePage\\index.tsx",[],"C:\\Users\\hp\\Desktop\\fluence-task\\src\\Dashboard\\index.tsx",["55"],"C:\\Users\\hp\\Desktop\\fluence-task\\src\\_aqua\\app.ts",["56"],"/**\r\n *\r\n * This file is auto-generated. Do not edit manually: changes may be erased.\r\n * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.\r\n * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues\r\n * Aqua version: 0.4.0-238\r\n *\r\n */\r\nimport { Fluence, FluencePeer } from '@fluencelabs/fluence';\r\nimport {\r\n    CallParams,\r\n    callFunction,\r\n    registerService,\r\n} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';\r\n\r\n\r\n// Services\r\n\r\nexport interface UserStatusDef {\r\n    notifyOnline: (userPeerId: string, isOnline: boolean, callParams: CallParams<'userPeerId' | 'isOnline'>) => void | Promise<void>;\r\nnotifyUserAdded: (currentUser: { name: string; peer_id: string; relay_id: string; }, isOnline: boolean, callParams: CallParams<'currentUser' | 'isOnline'>) => void | Promise<void>;\r\nnotifyUserRemoved: (userPeerId: string, callParams: CallParams<'userPeerId'>) => void | Promise<void>;\r\n}\r\nexport function registerUserStatus(service: UserStatusDef): void;\r\nexport function registerUserStatus(serviceId: string, service: UserStatusDef): void;\r\nexport function registerUserStatus(peer: FluencePeer, service: UserStatusDef): void;\r\nexport function registerUserStatus(peer: FluencePeer, serviceId: string, service: UserStatusDef): void;\r\n       \r\n\r\nexport function registerUserStatus(...args: any) {\r\n    registerService(\r\n        args,\r\n        {\r\n    \"defaultServiceId\" : \"fluence/fluence-task/status\",\r\n    \"functions\" : [\r\n        {\r\n            \"functionName\" : \"notifyOnline\",\r\n            \"argDefs\" : [\r\n                {\r\n                    \"name\" : \"userPeerId\",\r\n                    \"argType\" : {\r\n                        \"tag\" : \"primitive\"\r\n                    }\r\n                },\r\n                {\r\n                    \"name\" : \"isOnline\",\r\n                    \"argType\" : {\r\n                        \"tag\" : \"primitive\"\r\n                    }\r\n                }\r\n            ],\r\n            \"returnType\" : {\r\n                \"tag\" : \"void\"\r\n            }\r\n        },\r\n        {\r\n            \"functionName\" : \"notifyUserAdded\",\r\n            \"argDefs\" : [\r\n                {\r\n                    \"name\" : \"currentUser\",\r\n                    \"argType\" : {\r\n                        \"tag\" : \"primitive\"\r\n                    }\r\n                },\r\n                {\r\n                    \"name\" : \"isOnline\",\r\n                    \"argType\" : {\r\n                        \"tag\" : \"primitive\"\r\n                    }\r\n                }\r\n            ],\r\n            \"returnType\" : {\r\n                \"tag\" : \"void\"\r\n            }\r\n        },\r\n        {\r\n            \"functionName\" : \"notifyUserRemoved\",\r\n            \"argDefs\" : [\r\n                {\r\n                    \"name\" : \"userPeerId\",\r\n                    \"argType\" : {\r\n                        \"tag\" : \"primitive\"\r\n                    }\r\n                }\r\n            ],\r\n            \"returnType\" : {\r\n                \"tag\" : \"void\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n    );\r\n}\r\n      \r\n\r\n\r\nexport interface AppConfigDef {\r\n    getApp: (callParams: CallParams<null>) => { user_list: { peer_id: string; service_id: string; }; } | Promise<{ user_list: { peer_id: string; service_id: string; }; }>;\r\n}\r\nexport function registerAppConfig(service: AppConfigDef): void;\r\nexport function registerAppConfig(serviceId: string, service: AppConfigDef): void;\r\nexport function registerAppConfig(peer: FluencePeer, service: AppConfigDef): void;\r\nexport function registerAppConfig(peer: FluencePeer, serviceId: string, service: AppConfigDef): void;\r\n       \r\n\r\nexport function registerAppConfig(...args: any) {\r\n    registerService(\r\n        args,\r\n        {\r\n    \"defaultServiceId\" : \"fluence/get-config\",\r\n    \"functions\" : [\r\n        {\r\n            \"functionName\" : \"getApp\",\r\n            \"argDefs\" : [\r\n            ],\r\n            \"returnType\" : {\r\n                \"tag\" : \"primitive\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n    );\r\n}\r\n      \r\n// Functions\r\n \r\nexport type AuthResult = { err_msg: string; is_authenticated: boolean; ret_code: number; }\r\nexport function auth(config?: {ttl?: number}): Promise<AuthResult>;\r\nexport function auth(peer: FluencePeer, config?: {ttl?: number}): Promise<AuthResult>;\r\nexport function auth(...args: any) {\r\n\r\n    let script = `\r\n                        (xor\r\n                     (seq\r\n                      (seq\r\n                       (seq\r\n                        (seq\r\n                         (seq\r\n                          (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\r\n                          (call %init_peer_id% (\"fluence/get-config\" \"getApp\") [] app)\r\n                         )\r\n                         (call -relay- (\"op\" \"noop\") [])\r\n                        )\r\n                        (xor\r\n                         (seq\r\n                          (call -relay- (\"op\" \"noop\") [])\r\n                          (call app.$.user_list.peer_id! (app.$.user_list.service_id! \"is_authenticated\") [] res)\r\n                         )\r\n                         (seq\r\n                          (call -relay- (\"op\" \"noop\") [])\r\n                          (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\r\n                         )\r\n                        )\r\n                       )\r\n                       (call -relay- (\"op\" \"noop\") [])\r\n                      )\r\n                      (xor\r\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [res])\r\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\r\n                      )\r\n                     )\r\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\r\n                    )\r\n    `\r\n    return callFunction(\r\n        args,\r\n        {\r\n    \"functionName\" : \"auth\",\r\n    \"returnType\" : {\r\n        \"tag\" : \"primitive\"\r\n    },\r\n    \"argDefs\" : [\r\n    ],\r\n    \"names\" : {\r\n        \"relay\" : \"-relay-\",\r\n        \"getDataSrv\" : \"getDataSrv\",\r\n        \"callbackSrv\" : \"callbackSrv\",\r\n        \"responseSrv\" : \"callbackSrv\",\r\n        \"responseFnName\" : \"response\",\r\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\r\n        \"errorFnName\" : \"error\"\r\n    }\r\n},\r\n        script\r\n    )\r\n}\r\n\r\nexport type InitAfterJoinArgMe = { name: string; peer_id: string; relay_id: string; } \r\n\r\nexport function initAfterJoin(me: InitAfterJoinArgMe, config?: {ttl?: number}): Promise<{ name: string; peer_id: string; relay_id: string; }[]>;\r\nexport function initAfterJoin(peer: FluencePeer, me: InitAfterJoinArgMe, config?: {ttl?: number}): Promise<{ name: string; peer_id: string; relay_id: string; }[]>;\r\nexport function initAfterJoin(...args: any) {\r\n\r\n    let script = `\r\n                        (xor\r\n                     (seq\r\n                      (seq\r\n                       (seq\r\n                        (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\r\n                        (call %init_peer_id% (\"getDataSrv\" \"me\") [] me)\r\n                       )\r\n                       (par\r\n                        (seq\r\n                         (seq\r\n                          (seq\r\n                           (call %init_peer_id% (\"fluence/get-config\" \"getApp\") [] app)\r\n                           (call -relay- (\"op\" \"noop\") [])\r\n                          )\r\n                          (xor\r\n                           (seq\r\n                            (call -relay- (\"op\" \"noop\") [])\r\n                            (call app.$.user_list.peer_id! (app.$.user_list.service_id! \"get_users\") [] allUsers)\r\n                           )\r\n                           (seq\r\n                            (call -relay- (\"op\" \"noop\") [])\r\n                            (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\r\n                           )\r\n                          )\r\n                         )\r\n                         (call %init_peer_id% (\"op\" \"noop\") [])\r\n                        )\r\n                        (fold allUsers.$.users! user\r\n                         (par\r\n                          (seq\r\n                           (seq\r\n                            (seq\r\n                             (call -relay- (\"op\" \"noop\") [])\r\n                             (xor\r\n                              (call user.$.relay_id! (\"peer\" \"is_connected\") [user.$.peer_id!] isOnline)\r\n                              (seq\r\n                               (call -relay- (\"op\" \"noop\") [])\r\n                               (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\r\n                              )\r\n                             )\r\n                            )\r\n                            (call -relay- (\"op\" \"noop\") [])\r\n                           )\r\n                           (par\r\n                            (seq\r\n                             (call -relay- (\"op\" \"noop\") [])\r\n                             (xor\r\n                              (match isOnline true\r\n                               (xor\r\n                                (xor\r\n                                 (call user.$.peer_id! (\"fluence/fluence-task/status\" \"notifyUserAdded\") [me true])\r\n                                 (seq\r\n                                  (seq\r\n                                   (seq\r\n                                    (call user.$.relay_id! (\"op\" \"noop\") [])\r\n                                    (call -relay- (\"op\" \"noop\") [])\r\n                                   )\r\n                                   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\r\n                                  )\r\n                                  (call -relay- (\"op\" \"noop\") [])\r\n                                 )\r\n                                )\r\n                                (seq\r\n                                 (seq\r\n                                  (call user.$.relay_id! (\"op\" \"noop\") [])\r\n                                  (call -relay- (\"op\" \"noop\") [])\r\n                                 )\r\n                                 (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\r\n                                )\r\n                               )\r\n                              )\r\n                              (null)\r\n                             )\r\n                            )\r\n                            (seq\r\n                             (call -relay- (\"op\" \"noop\") [])\r\n                             (call %init_peer_id% (\"fluence/fluence-task/status\" \"notifyUserAdded\") [user isOnline])\r\n                            )\r\n                           )\r\n                          )\r\n                          (next user)\r\n                         )\r\n                        )\r\n                       )\r\n                      )\r\n                      (xor\r\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [allUsers.$.users!])\r\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 5])\r\n                      )\r\n                     )\r\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 6])\r\n                    )\r\n    `\r\n    return callFunction(\r\n        args,\r\n        {\r\n    \"functionName\" : \"initAfterJoin\",\r\n    \"returnType\" : {\r\n        \"tag\" : \"primitive\"\r\n    },\r\n    \"argDefs\" : [\r\n        {\r\n            \"name\" : \"me\",\r\n            \"argType\" : {\r\n                \"tag\" : \"primitive\"\r\n            }\r\n        }\r\n    ],\r\n    \"names\" : {\r\n        \"relay\" : \"-relay-\",\r\n        \"getDataSrv\" : \"getDataSrv\",\r\n        \"callbackSrv\" : \"callbackSrv\",\r\n        \"responseSrv\" : \"callbackSrv\",\r\n        \"responseFnName\" : \"response\",\r\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\r\n        \"errorFnName\" : \"error\"\r\n    }\r\n},\r\n        script\r\n    )\r\n}\r\n\r\n \r\n\r\nexport function updateOnlineStatuses(config?: {ttl?: number}): Promise<void>;\r\nexport function updateOnlineStatuses(peer: FluencePeer, config?: {ttl?: number}): Promise<void>;\r\nexport function updateOnlineStatuses(...args: any) {\r\n\r\n    let script = `\r\n                        (xor\r\n                     (seq\r\n                      (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\r\n                      (par\r\n                       (seq\r\n                        (seq\r\n                         (seq\r\n                          (call %init_peer_id% (\"fluence/get-config\" \"getApp\") [] app)\r\n                          (call -relay- (\"op\" \"noop\") [])\r\n                         )\r\n                         (xor\r\n                          (seq\r\n                           (call -relay- (\"op\" \"noop\") [])\r\n                           (call app.$.user_list.peer_id! (app.$.user_list.service_id! \"get_users\") [] allUsers)\r\n                          )\r\n                          (seq\r\n                           (call -relay- (\"op\" \"noop\") [])\r\n                           (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\r\n                          )\r\n                         )\r\n                        )\r\n                        (call %init_peer_id% (\"op\" \"noop\") [])\r\n                       )\r\n                       (fold allUsers.$.users! user\r\n                        (par\r\n                         (seq\r\n                          (seq\r\n                           (seq\r\n                            (seq\r\n                             (seq\r\n                              (call -relay- (\"op\" \"noop\") [])\r\n                              (call user.$.relay_id! (\"op\" \"noop\") [])\r\n                             )\r\n                             (xor\r\n                              (call user.$.peer_id! (\"peer\" \"is_connected\") [user.$.peer_id!] isOnline)\r\n                              (seq\r\n                               (seq\r\n                                (seq\r\n                                 (call user.$.relay_id! (\"op\" \"noop\") [])\r\n                                 (call -relay- (\"op\" \"noop\") [])\r\n                                )\r\n                                (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\r\n                               )\r\n                               (call -relay- (\"op\" \"noop\") [])\r\n                              )\r\n                             )\r\n                            )\r\n                            (call user.$.relay_id! (\"op\" \"noop\") [])\r\n                           )\r\n                           (call -relay- (\"op\" \"noop\") [])\r\n                          )\r\n                          (call %init_peer_id% (\"fluence/fluence-task/status\" \"notifyOnline\") [user.$.peer_id! isOnline])\r\n                         )\r\n                         (next user)\r\n                        )\r\n                       )\r\n                      )\r\n                     )\r\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\r\n                    )\r\n    `\r\n    return callFunction(\r\n        args,\r\n        {\r\n    \"functionName\" : \"updateOnlineStatuses\",\r\n    \"returnType\" : {\r\n        \"tag\" : \"void\"\r\n    },\r\n    \"argDefs\" : [\r\n    ],\r\n    \"names\" : {\r\n        \"relay\" : \"-relay-\",\r\n        \"getDataSrv\" : \"getDataSrv\",\r\n        \"callbackSrv\" : \"callbackSrv\",\r\n        \"responseSrv\" : \"callbackSrv\",\r\n        \"responseFnName\" : \"response\",\r\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\r\n        \"errorFnName\" : \"error\"\r\n    }\r\n},\r\n        script\r\n    )\r\n}\r\n\r\nexport type JoinNewArgUser = { name: string; peer_id: string; relay_id: string; } \r\nexport type JoinNewResult = { err_msg: string; ret_code: number; }\r\nexport function joinNew(user: JoinNewArgUser, config?: {ttl?: number}): Promise<JoinNewResult>;\r\nexport function joinNew(peer: FluencePeer, user: JoinNewArgUser, config?: {ttl?: number}): Promise<JoinNewResult>;\r\nexport function joinNew(...args: any) {\r\n\r\n    let script = `\r\n                        (xor\r\n                     (seq\r\n                      (seq\r\n                       (seq\r\n                        (seq\r\n                         (seq\r\n                          (seq\r\n                           (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\r\n                           (call %init_peer_id% (\"getDataSrv\" \"user\") [] user)\r\n                          )\r\n                          (call %init_peer_id% (\"fluence/get-config\" \"getApp\") [] app)\r\n                         )\r\n                         (call -relay- (\"op\" \"noop\") [])\r\n                        )\r\n                        (xor\r\n                         (seq\r\n                          (call -relay- (\"op\" \"noop\") [])\r\n                          (call app.$.user_list.peer_id! (app.$.user_list.service_id! \"join\") [user] res)\r\n                         )\r\n                         (seq\r\n                          (call -relay- (\"op\" \"noop\") [])\r\n                          (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\r\n                         )\r\n                        )\r\n                       )\r\n                       (call -relay- (\"op\" \"noop\") [])\r\n                      )\r\n                      (xor\r\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [res])\r\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\r\n                      )\r\n                     )\r\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\r\n                    )\r\n    `\r\n    return callFunction(\r\n        args,\r\n        {\r\n    \"functionName\" : \"joinNew\",\r\n    \"returnType\" : {\r\n        \"tag\" : \"primitive\"\r\n    },\r\n    \"argDefs\" : [\r\n        {\r\n            \"name\" : \"user\",\r\n            \"argType\" : {\r\n                \"tag\" : \"primitive\"\r\n            }\r\n        }\r\n    ],\r\n    \"names\" : {\r\n        \"relay\" : \"-relay-\",\r\n        \"getDataSrv\" : \"getDataSrv\",\r\n        \"callbackSrv\" : \"callbackSrv\",\r\n        \"responseSrv\" : \"callbackSrv\",\r\n        \"responseFnName\" : \"response\",\r\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\r\n        \"errorFnName\" : \"error\"\r\n    }\r\n},\r\n        script\r\n    )\r\n}\r\n\r\n \r\n\r\nexport function getUserList(config?: {ttl?: number}): Promise<{ name: string; peer_id: string; relay_id: string; }[]>;\r\nexport function getUserList(peer: FluencePeer, config?: {ttl?: number}): Promise<{ name: string; peer_id: string; relay_id: string; }[]>;\r\nexport function getUserList(...args: any) {\r\n\r\n    let script = `\r\n                        (xor\r\n                     (seq\r\n                      (seq\r\n                       (seq\r\n                        (seq\r\n                         (seq\r\n                          (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\r\n                          (call %init_peer_id% (\"fluence/get-config\" \"getApp\") [] app)\r\n                         )\r\n                         (call -relay- (\"op\" \"noop\") [])\r\n                        )\r\n                        (xor\r\n                         (seq\r\n                          (call -relay- (\"op\" \"noop\") [])\r\n                          (call app.$.user_list.peer_id! (app.$.user_list.service_id! \"get_users\") [] allUsers)\r\n                         )\r\n                         (seq\r\n                          (call -relay- (\"op\" \"noop\") [])\r\n                          (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\r\n                         )\r\n                        )\r\n                       )\r\n                       (call -relay- (\"op\" \"noop\") [])\r\n                      )\r\n                      (xor\r\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [allUsers.$.users!])\r\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\r\n                      )\r\n                     )\r\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\r\n                    )\r\n    `\r\n    return callFunction(\r\n        args,\r\n        {\r\n    \"functionName\" : \"getUserList\",\r\n    \"returnType\" : {\r\n        \"tag\" : \"primitive\"\r\n    },\r\n    \"argDefs\" : [\r\n    ],\r\n    \"names\" : {\r\n        \"relay\" : \"-relay-\",\r\n        \"getDataSrv\" : \"getDataSrv\",\r\n        \"callbackSrv\" : \"callbackSrv\",\r\n        \"responseSrv\" : \"callbackSrv\",\r\n        \"responseFnName\" : \"response\",\r\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\r\n        \"errorFnName\" : \"error\"\r\n    }\r\n},\r\n        script\r\n    )\r\n}\r\n\r\n \r\n\r\nexport function leave(config?: {ttl?: number}): Promise<void>;\r\nexport function leave(peer: FluencePeer, config?: {ttl?: number}): Promise<void>;\r\nexport function leave(...args: any) {\r\n\r\n    let script = `\r\n                        (xor\r\n                     (seq\r\n                      (seq\r\n                       (seq\r\n                        (seq\r\n                         (seq\r\n                          (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\r\n                          (call %init_peer_id% (\"fluence/get-config\" \"getApp\") [] app)\r\n                         )\r\n                         (call -relay- (\"op\" \"noop\") [])\r\n                        )\r\n                        (xor\r\n                         (seq\r\n                          (call -relay- (\"op\" \"noop\") [])\r\n                          (call app.$.user_list.peer_id! (app.$.user_list.service_id! \"leave\") [%init_peer_id%] res)\r\n                         )\r\n                         (seq\r\n                          (call -relay- (\"op\" \"noop\") [])\r\n                          (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\r\n                         )\r\n                        )\r\n                       )\r\n                       (call -relay- (\"op\" \"noop\") [])\r\n                      )\r\n                      (par\r\n                       (seq\r\n                        (seq\r\n                         (seq\r\n                          (seq\r\n                           (call -relay- (\"op\" \"noop\") [])\r\n                           (call %init_peer_id% (\"fluence/get-config\" \"getApp\") [] app0)\r\n                          )\r\n                          (call -relay- (\"op\" \"noop\") [])\r\n                         )\r\n                         (xor\r\n                          (seq\r\n                           (call -relay- (\"op\" \"noop\") [])\r\n                           (call app0.$.user_list.peer_id! (app0.$.user_list.service_id! \"get_users\") [] allUsers)\r\n                          )\r\n                          (seq\r\n                           (call -relay- (\"op\" \"noop\") [])\r\n                           (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\r\n                          )\r\n                         )\r\n                        )\r\n                        (call %init_peer_id% (\"op\" \"noop\") [])\r\n                       )\r\n                       (seq\r\n                        (call -relay- (\"op\" \"noop\") [])\r\n                        (fold allUsers.$.users! user\r\n                         (par\r\n                          (seq\r\n                           (call user.$.relay_id! (\"op\" \"noop\") [])\r\n                           (xor\r\n                            (call user.$.peer_id! (\"fluence/fluence-task/status\" \"notifyUserRemoved\") [%init_peer_id%])\r\n                            (seq\r\n                             (seq\r\n                              (call user.$.relay_id! (\"op\" \"noop\") [])\r\n                              (call -relay- (\"op\" \"noop\") [])\r\n                             )\r\n                             (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\r\n                            )\r\n                           )\r\n                          )\r\n                          (seq\r\n                           (call -relay- (\"op\" \"noop\") [])\r\n                           (next user)\r\n                          )\r\n                         )\r\n                        )\r\n                       )\r\n                      )\r\n                     )\r\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\r\n                    )\r\n    `\r\n    return callFunction(\r\n        args,\r\n        {\r\n    \"functionName\" : \"leave\",\r\n    \"returnType\" : {\r\n        \"tag\" : \"void\"\r\n    },\r\n    \"argDefs\" : [\r\n    ],\r\n    \"names\" : {\r\n        \"relay\" : \"-relay-\",\r\n        \"getDataSrv\" : \"getDataSrv\",\r\n        \"callbackSrv\" : \"callbackSrv\",\r\n        \"responseSrv\" : \"callbackSrv\",\r\n        \"responseFnName\" : \"response\",\r\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\r\n        \"errorFnName\" : \"error\"\r\n    }\r\n},\r\n        script\r\n    )\r\n}\r\n","C:\\Users\\hp\\Desktop\\fluence-task\\src\\Contexts\\connection.jsx",[],["57","58"],"C:\\Users\\hp\\Desktop\\fluence-task\\src\\Contexts\\join.jsx",[],"C:\\Users\\hp\\Desktop\\fluence-task\\src\\components\\userList.tsx",["59"],"C:\\Users\\hp\\Desktop\\fluence-task\\src\\components\\Tiles\\index.js",[],"C:\\Users\\hp\\Desktop\\fluence-task\\src\\components\\Modal\\index.js",[],"C:\\Users\\hp\\Desktop\\fluence-task\\src\\components\\handlers.tsx",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":133,"column":48,"nodeType":"66","messageId":"67","endLine":133,"endColumn":50},{"ruleId":"68","severity":1,"message":"69","line":9,"column":10,"nodeType":"70","messageId":"71","endLine":9,"endColumn":17},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"68","severity":1,"message":"72","line":6,"column":10,"nodeType":"70","messageId":"71","endLine":6,"endColumn":20},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'Fluence' is defined but never used.","Identifier","unusedVar","'CallParams' is defined but never used.","no-global-assign","no-unsafe-negation"]